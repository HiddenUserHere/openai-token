{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { wrapper } from 'axios-cookiejar-support';\r\nimport { CookieJar } from 'tough-cookie';\r\n\r\n// create error class with location, statusCode and details\r\nclass HttpError extends Error {\r\n  constructor(public location: string, public statusCode: number, public details: any) {\r\n    super(details);\r\n  }\r\n}\r\n\r\n// create Authenticator class\r\nclass Authenticator {\r\n    private client: AxiosInstance\r\n    private jar: CookieJar\r\n    private userAgent = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\"\r\n    private accessToken: string | null = null;\r\n\r\n    constructor(private email: string, private password: string) {\r\n        this.jar = new CookieJar();\r\n        this.client = wrapper(axios.create({ jar: this.jar }));\r\n    }\r\n\r\n    private static urlEncode(str: string) {\r\n        return encodeURIComponent(str).replace(/%20/g, '+');\r\n    }\r\n\r\n    async begin(): Promise<void> {\r\n        const url = \"https://explorer.api.openai.com/api/auth/csrf\"\r\n        const headers = {\r\n            \"Host\": \"explorer.api.openai.com\",\r\n            \"Accept\": \"*/*\",\r\n            \"Connection\": \"keep-alive\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Accept-Language\": \"en-GB,en-US;q=0.9,en;q=0.8\",\r\n            \"Referer\": \"https://explorer.api.openai.com/auth/login\",\r\n            \"Accept-Encoding\": \"gzip, deflate, br\",\r\n        }\r\n        const response = await this.client.get(url, { headers });\r\n        if (response.status === 200 && response.data.csrfToken) {\r\n            const csrfToken = response.data.csrfToken;\r\n            await this.partOne(csrfToken);\r\n        } else {\r\n            throw new HttpError('begin', response.status, response.data);\r\n        }\r\n    }\r\n\r\n    private async partOne(csrfToken: string): Promise<void> {\r\n        const url = \"https://explorer.api.openai.com/api/auth/signin/auth0?prompt=login\"\r\n        const payload = `callbackUrl=%2F&csrfToken=${csrfToken}&json=true`\r\n        const headers = {\r\n            \"Host\": \"explorer.api.openai.com\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            \"Accept\": \"*/*\",\r\n            \"Sec-Gpc\": \"1\",\r\n            \"Accept-Language\": \"en-US,en;q=0.8\",\r\n            \"Origin\": \"https://explorer.api.openai.com\",\r\n            \"Sec-Fetch-Site\": \"same-origin\",\r\n            \"Sec-Fetch-Mode\": \"cors\",\r\n            \"Sec-Fetch-Dest\": \"empty\",\r\n            \"Referer\": \"https://explorer.api.openai.com/auth/login\",\r\n            \"Accept-Encoding\": \"gzip, deflate\",\r\n        }\r\n        const response = await this.client.post(url, payload, { headers });\r\n        if (response.status === 200 && response.data.url) {\r\n            const url2 = response.data.url;\r\n            if (url2 === 'https://explorer.api.openai.com/api/auth/error?error=OAuthSignin' || url2.includes('error')) {\r\n                throw new HttpError('partOne', response.status, 'You have been rate limited. Please try again later.');\r\n            }\r\n            await this.partTwo(url2);\r\n        } else {\r\n            throw new HttpError('partOne', response.status, response.data);\r\n        }\r\n    }\r\n\r\n    private async partTwo(url: string): Promise<void> {\r\n        const headers = {\r\n            \"Host\": \"auth0.openai.com\",\r\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\r\n            \"Connection\": \"keep-alive\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Accept-Language\": \"en-US,en;q=0.9\",\r\n            \"Referer\": \"https://explorer.api.openai.com/\",\r\n        }\r\n        const response = await this.client.get(url, { headers });\r\n        if (response.status === 302 || response.status === 200) {\r\n            let state = response.data.match(/state=(.*)/)[1];\r\n            state = state.split('\"')[0];\r\n            await this.partThree(state);\r\n        } else {\r\n            throw new HttpError('partTwo', response.status, response.data);\r\n        }\r\n    }\r\n\r\n    private async partThree(state: string): Promise<void> {\r\n        const url = `https://auth0.openai.com/u/login/identifier?state=${state}`\r\n        const headers = {\r\n            \"Host\": \"auth0.openai.com\",\r\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\r\n            \"Connection\": \"keep-alive\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Accept-Language\": \"en-US,en;q=0.9\",\r\n            \"Referer\": \"https://explorer.api.openai.com/\",\r\n        }\r\n        const response = await this.client.get(url, { headers });\r\n        if (response.status === 200) {\r\n            await this.partFour(state);\r\n        } else {\r\n            throw new HttpError('partThree', response.status, response.data);\r\n        }\r\n    }\r\n\r\n    private async partFour(state: string): Promise<void> {\r\n        const url = `https://auth0.openai.com/u/login/identifier?state=${state}`\r\n        const emailEncoded = Authenticator.urlEncode(this.email);\r\n\r\n        const payload = `state=${state}&username=${emailEncoded}&js-available=false&webauthn-available=true&is-brave=false&webauthn-platform-available=true&action=default `;\r\n        const headers = {\r\n            \"Host\": \"auth0.openai.com\",\r\n            \"Origin\": \"https://auth0.openai.com\",\r\n            \"Connection\": \"keep-alive\",\r\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Referer\": `https://auth0.openai.com/u/login/identifier?state=${state}`,\r\n            \"Accept-Language\": \"en-US,en;q=0.9\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        }\r\n        const response = await this.client.post(url, payload, { headers });\r\n        if (response.status === 302 || response.status === 200) {\r\n            await this.partFive(state);\r\n        } else {\r\n            throw new HttpError('partFour', response.status, \"Your email address is invalid.\");\r\n        }\r\n    }\r\n\r\n    private async partFive(state: string): Promise<void> {\r\n        const url = `https://auth0.openai.com/u/login/password?state=${state}`\r\n        const emailEncoded = Authenticator.urlEncode(this.email);\r\n        const passwordEncoded = Authenticator.urlEncode(this.password);\r\n        const payload = `state=${state}&username=${emailEncoded}&password=${passwordEncoded}&action=default`;\r\n\r\n        const headers = {\r\n            \"Host\": \"auth0.openai.com\",\r\n            \"Origin\": \"https://auth0.openai.com\",\r\n            \"Connection\": \"keep-alive\",\r\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\r\n            \"User-Agent\": this.userAgent,\r\n            \"Referer\": `https://auth0.openai.com/u/login/password?state=${state}`,\r\n            \"Accept-Language\": \"en-US,en;q=0.9\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        }\r\n        const response = await this.client.post(url, payload, { headers, validateStatus: () => true });\r\n    }\r\n\r\n    async getAccessToken(): Promise<string> {\r\n        const response = await this.client.get('https://explorer.api.openai.com/api/auth/session', { headers: { 'User-Agent': this.userAgent } });\r\n        if (response.status === 200) {\r\n            this.accessToken = response.data.accessToken;\r\n            return this.accessToken!;\r\n        } else {\r\n            throw new HttpError('getAccessToken', response.status, response.data);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Authenticator;"],"mappings":"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","names":[]}